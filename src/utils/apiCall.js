import axios from 'axios';
import Cookies from 'js-cookie';

const api = axios.create({
    baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/api',
    withCredentials: true, // Inclut les cookies dans toutes les requ√™tes
});

let cachedCsrfToken = null; // Cache pour le token CSRF
let isRefreshing = false; // Emp√™che les appels simultan√©s au refresh token
let failedRequestsQueue = []; // G√®re les requ√™tes en attente pendant le refresh
let isLoggedOut = false;

// **Intercepteur pour ajouter le token CSRF dans les requ√™tes**
api.interceptors.request.use(
    async (config) => {
        // Ajouter le token CSRF pour les m√©thodes sensibles (POST, PUT, DELETE)
        if (['post', 'put', 'delete'].includes(config.method)) {
            if (!cachedCsrfToken) {
                try {
                    const response = await api.get('/csrf-token'); // Appel pour r√©cup√©rer le CSRF token
                    cachedCsrfToken = response.data.csrfToken; // Stocke le token en cache
                } catch (error) {
                    console.error("Erreur lors de la r√©cup√©ration du token CSRF :", error);
                    return Promise.reject(error);
                }
            }
            config.headers['CSRF-Token'] = cachedCsrfToken; // Ajoute le token CSRF √† l'en-t√™te
        }

        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

// **Intercepteur pour g√©rer les erreurs de r√©ponse et le refresh token**
api.interceptors.response.use(
    (response) => response, // ‚úÖ Laisse passer les r√©ponses valides
    async (error) => {
        const originalRequest = error.config;

        // ‚úÖ Emp√™che toute tentative de refresh si l'utilisateur s'est d√©connect√©
        if (isLoggedOut) {
            // console.log("üîí L'utilisateur est d√©connect√©, arr√™t du refresh token.");
            return Promise.reject(error);
        }

        // ‚úÖ V√©rifie si le backend indique que le token est expir√© et n√©cessite un refresh
        if (error.response?.status === 401 && error.response?.data?.refreshRequired) {
            // console.log("‚ö†Ô∏è JWT Expir√© - Tentative de rafra√Æchissement...");

            originalRequest._retry = true; // ‚úÖ √âvite les boucles infinies

            if (isRefreshing) {
                // console.log("Refresh d√©j√† en cours, ajout √† la file d'attente...");
                return new Promise((resolve, reject) => {
                    failedRequestsQueue.push({ resolve, reject });
                })
                    .then(() => api(originalRequest))
                    .catch((err) => Promise.reject(err));
            }

            isRefreshing = true;

            try {
                // console.log("üîÑ Appel √† /auth/refreshTokenWeb...");
                await api.post('/auth/refreshTokenWeb');
                // console.log("‚úÖ Token rafra√Æchi avec succ√®s.");

                failedRequestsQueue.forEach((req) => req.resolve());
                failedRequestsQueue = [];
                isRefreshing = false;

                // ‚úÖ Relance la requ√™te initiale apr√®s refresh
                return api(originalRequest);
            } catch (refreshError) {
                // console.error("‚ùå Erreur lors du rafra√Æchissement :", refreshError);
                failedRequestsQueue.forEach((req) => req.reject(refreshError));
                failedRequestsQueue = [];
                isRefreshing = false;

                // ‚úÖ Si le refresh √©choue, on d√©connecte l'utilisateur proprement
                // console.log("‚ùå Refresh √©chou√© - D√©connexion forc√©e.");
                isLoggedOut = true; // ‚úÖ Bloque toute autre tentative de refresh

                if (typeof window !== "undefined") {
                    const { logout } = require("../context/AuthContext").useAuth();
                    logout();
                }

                return Promise.reject(refreshError);
            }
        }

        return Promise.reject(error);
    }
);

// ‚úÖ Supprimer l‚Äôintercepteur apr√®s d√©connexion
const removeRefreshInterceptor = () => {
    api.interceptors.response.eject(api.interceptors.response.handlers.length - 1);
    // console.log("üö´ Intercepteur supprim√© apr√®s d√©connexion.");
};

// ‚úÖ Exporter `removeRefreshInterceptor`
export { removeRefreshInterceptor };

// **Intercepteur pour g√©rer les erreurs de r√©ponse et le refresh token**
// api.interceptors.response.use(
//     (response) => response, // Laisse passer les r√©ponses r√©ussies
//     async (error) => {
//         const originalRequest = error.config;

//         // Si une erreur 401 est d√©tect√©e et qu'il ne s'agit pas d√©j√† d'une tentative de refresh
//         if (error.response?.status === 401 && !originalRequest._retry) {
//             originalRequest._retry = true; // Emp√™che les boucles infinies
//             console.log("ERRRRRRRRRRRRRRRRRRRRRRRORRRRR 401")
//             // Si un refresh est d√©j√† en cours, attendre sa r√©solution
//             if (isRefreshing) {
//                 return new Promise((resolve, reject) => {
//                     failedRequestsQueue.push({ resolve, reject });
//                 })
//                     .then(() => api(originalRequest)) // Relancer la requ√™te initiale
//                     .catch((err) => Promise.reject(err));
//             }

//             isRefreshing = true;

//             try {
//                 // Appel au backend pour rafra√Æchir le token
//                 await api.post('/auth/refreshTokenWeb'); // Ce point renvoie un nouveau JWT

//                 // Succ√®s : vider la file d'attente des requ√™tes √©chou√©es
//                 failedRequestsQueue.forEach((req) => req.resolve());
//                 failedRequestsQueue = []; // R√©initialiser la file
//                 isRefreshing = false;

//                 return api(originalRequest); // Relancer la requ√™te initiale
//             } catch (refreshError) {
//                 console.error("Erreur lors du rafra√Æchissement du token :", refreshError);

//                 // √âchec : rejeter toutes les requ√™tes en attente
//                 failedRequestsQueue.forEach((req) => req.reject(refreshError));
//                 failedRequestsQueue = [];
//                 isRefreshing = false;

//                 return Promise.reject(refreshError); // Forcer la reconnexion
//             }
//         }

//         return Promise.reject(error); // Rejeter les autres erreurs
//     }
// );



// api.interceptors.response.use(
//     (response) => response,
//     async (error) => {
//       const originalRequest = error.config;
  
//       if (error.response?.status === 401 && !originalRequest._retry) {
//         originalRequest._retry = true;
  
//         try {
//           // Rafra√Æchir le token
//           const { data } = await api.post('/auth/refreshTokenWeb'); // Le cookie `refreshToken` est automatiquement envoy√©
//           console.log("‚úÖ Nouveau access token re√ßu :", data.accessToken);
  
//           // Ajouter le nouveau token √† l'en-t√™te de la requ√™te originale
//           originalRequest.headers.Authorization = `Bearer ${data.accessToken}`;
  
//           // Relancer la requ√™te originale
//           return api(originalRequest);
//         } catch (refreshError) {
//           console.error("‚ùå √âchec du rafra√Æchissement :", refreshError);
//           window.location.href = '/auth'; // Rediriger en cas d'√©chec
//           return Promise.reject(refreshError);
//         }
//       }
  
//       return Promise.reject(error);
//     }
//   );
  

export default api;